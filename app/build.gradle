apply plugin: 'com.android.application'
apply plugin: 'me.tatarka.retrolambda'

android {
    // プロジェクトrootのbuild.gradleのext内で定義したプロパティを使用
    compileSdkVersion compile_sdk_version
    buildToolsVersion build_tools_version
    defaultConfig {
        applicationId application_id
        minSdkVersion min_sdk_version
        targetSdkVersion target_sdk_version
        versionCode version_code
        versionName version_name
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    // flavor
    final default_flavor = "default"
    flavorDimensions default_flavor

    productFlavors {

        mock {
            dimension default_flavor
            // applicationIdを変更すると、異なるFlavorでビルドしたアプリが端末内で共存できる
            applicationIdSuffix ".mock"
            // AndroidManifest内で使用できるプロパティを設定
            manifestPlaceholders = [
                    applicationName : application_name + " mock",
                    configurationName : config_name + " mock",
                    icon : "@mipmap/ic_launcher",
                    roundIcon : "@mipmap/ic_launcher_round",
            ]
        }

        dev {
            dimension default_flavor
            applicationIdSuffix ".dev"
            manifestPlaceholders = [
                    applicationName : application_name + " dev",
                    configurationName : config_name + " dev",
                    icon : "@mipmap/ic_launcher",
                    roundIcon : "@mipmap/ic_launcher_round",
            ]
        }

        pro {
            dimension default_flavor
            manifestPlaceholders = [
                    applicationName : application_name,
                    icon : "@mipmap/ic_launcher",
                    roundIcon : "@mipmap/ic_launcher_round",
            ]
        }

    }

    buildTypes {
        debug {
            // メソッドが64kを超えたら以下のコメントアウトを解除
            //minifyEnabled true
            //useProguard false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        release {
            minifyEnabled true
            shrinkResources true
            zipAlignEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    // Retrolambdaの設定で必要になる。Java8を使えるように指定
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    // データバインディングを有効にする
    dataBinding {
        enabled = true
    }

    // flavorとbuildTypeの組み合わせでフィルタリング
    variantFilter { variant ->
        String buildTypeName = variant.buildType.name;
        String flavorDef = variant.getFlavors().get(0).name.toLowerCase()
        if(flavorDef.contains('mock')) {
            if(buildTypeName.equals('release')) {
                variant.setIgnore(true)
            }
        } else if(flavorDef.contains('pro')) {
            if(buildTypeName.equals('debug')) {
                variant.setIgnore(true)
            }
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
        // 以下のモジュールを除く
        exclude group: 'com.google.code.findbugs', module: 'jsr305'
    })
    compile 'com.android.support.constraint:constraint-layout:1.0.2'
    testCompile 'junit:junit:4.12'

    // Support Library
    // Googleが提供しているAndroidのサポートライブラリ。現状必須
    compile "com.android.support:appcompat-v7:$support_lib_version"
    compile "com.android.support:recyclerview-v7:$support_lib_version"
    compile "com.android.support:customtabs:$support_lib_version"

    // Dagger2
    // JavaのアノテーションによってDI(Dependency Injection)を行なってくれるライブラリ。
    // Factoryクラスを自動的に生成してくれるものと考えて良い。
    compile "com.google.dagger:dagger:$dagger_version"
    annotationProcessor "com.google.dagger:dagger-compiler:$dagger_version"
    compile "com.google.dagger:dagger-android:$dagger_version"
    // TODO SupportFragment使う時コメントアウト外す
    //compile "com.google.dagger:dagger-android-support:$dagger_version"
    annotationProcessor "com.google.dagger:dagger-android-processor:$dagger_version"

    // Orma
    // Android用のORM(Object Relation Mapping)ライブラリ。
    // アノテーションによって、各種のDB操作を型安全メソッドで提供してくれる。
    annotationProcessor "com.github.gfx.android.orma:orma-processor:$orma_version"
    compile "com.github.gfx.android.orma:orma:$orma_version"

    // Retrofit
    // Java用のHTTP通信クライアントライブラリ。
    // アノテーションによって、HTTP通信処理を型安全メソッドで提供してくれる。
    // RxJavaと組み合わせる機能がファーストパーティから提供されている。
    compile "com.squareup.retrofit2:retrofit:$retrofit_version"
    compile "com.squareup.retrofit2:converter-gson:$retrofit_version"
    compile "com.squareup.retrofit2:adapter-rxjava2:$retrofit_version"
    compile "com.squareup.okhttp3:logging-interceptor:$okhttp_version"
    testCompile "com.squareup.okhttp3:mockwebserver:$okhttp_version"

    // RxJava2
    // プログラミングにとって本質的でない部分を隠蔽してくれるライブラリ。
    compile "io.reactivex.rxjava2:rxjava:2.1.5"
    compile "io.reactivex.rxjava2:rxandroid:2.0.1"
    // Viewのコールバック処理をRxJavaで書ける
    compile 'com.jakewharton.rxbinding2:rxbinding:2.0.0'
    // ライフサイクルを自分で定義して、その間だけストリームを有効化できる
    compile 'com.uber.autodispose:autodispose-android:0.2.0'
    // Permission処理をRxJavaライクに書ける
    compile 'com.tbruyelle.rxpermissions2:rxpermissions:0.9.4@aar'

    // Timber
    // ログを出力するロジックを自分で設定できる
    compile 'com.jakewharton.timber:timber:4.5.1'

    // Leak Canary
    // アプリケーションのメモリリークを検知することができる
    debugCompile "com.squareup.leakcanary:leakcanary-android:$leak_canary_version"
    releaseCompile "com.squareup.leakcanary:leakcanary-android-no-op:$leak_canary_version"
    testCompile "com.squareup.leakcanary:leakcanary-android-no-op:$leak_canary_version"

    // Stetho
    // Google Chromeでデバッグすることができる
    // UIヒエラルキーチェック/値の一時的な書き換え・ローカルストレージインスペクションなど便利
    compile 'com.facebook.stetho:stetho:1.5.0'

    // Picasso
    // 画像読み込みライブラリ。キャッシュなどをライブラリ側で行なってくれる
    compile 'com.squareup.picasso:picasso:2.5.2'
    compile 'com.jakewharton.picasso:picasso2-okhttp3-downloader:1.1.0'

    // Leonids
    // パーティクルを表示してくれるライブラリ。
    compile 'com.plattysoft.leonids:LeonidsLib:1.3.2'
}
